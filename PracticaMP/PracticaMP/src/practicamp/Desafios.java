/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package practicamp;

import java.awt.CardLayout;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author aserr
 */
public class Desafios extends javax.swing.JPanel {
    
    private Almacen almacen;
    private double oro;
    /**
     * Creates new form Desafios
     */
    public Desafios(Almacen almacen) {
        this.almacen = almacen;
        initComponents();
    }
    
    DefaultListModel mod = new DefaultListModel();
    public void actualizarList(){
        int i = 0;
        List<Usuario> usuarios = Almacen.getUsuarios();
        userList.setModel(mod); // para añadir los elementos a la lista
        mod.clear();
        while (i < usuarios.size()){
            String candidato = usuarios.get(i).getNick();
            boolean soyYo = candidato.equalsIgnoreCase(Almacen.getUsuarioActivo().getNick());
            boolean esAdmin = usuarios.get(i).getRol() == Rol.admin;
            boolean tienePersonaje = usuarios.get(i).getTipoPersonaje() != null;
            if (!soyYo && !esAdmin  && tienePersonaje){
                mod.addElement(candidato);
            }else if (soyYo){
                this.oro = usuarios.get(i).getOro();
            }
            i = i + 1;
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        goldText = new javax.swing.JTextField();
        desafiar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        userList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(userList);

        goldText.setText("Apostar oro");
        goldText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                goldTextMousePressed(evt);
            }
        });

        desafiar.setText("Desafiar");
        desafiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desafiarActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(goldText, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desafiar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(goldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(desafiar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVolver, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addContainerGap())
        );
    }//GEN-END:initComponents

    private void desafiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desafiarActionPerformed
        if(goldText.getText().isEmpty() || goldText.getText().equals("Apostar oro")){
            JOptionPane.showMessageDialog(this, "Introduce una cantidad de oro a apostar"); // Muestra un mensaje si está vacío
        }
        else{
            //Si todo esta bien (seleccionamos contrincante y oro):
            double oroApostado = -1;
            try {
                oroApostado = Integer.parseInt(goldText.getText());
                if ((userList.getSelectedIndex() != -1) && (!goldText.getText().equals("Apostar oro"))&& oroApostado<= this.oro && oroApostado >= 0) {// el boton solo hace cosas si eliges un nombre de la lista 
                    String contrincante = userList.getSelectedValue();
                    
                    // Deducimos el oro del desafiante
                    Usuario desafiante = Almacen.getUsuarioActivo();
//                    if ((Almacen.getUsuarios().get(userList.getSelectedIndex()).getArmasActivas().size() != 0) && ((Almacen.getUsuarios().get(userList.getSelectedIndex()).getArmaduraActiva() != null))) {
//                        desafiante.setOro(desafiante.getOro() - oroApostado);
                    
                        Desafio newDesafio = new Desafio(Almacen.getUsuarioActivo(), this.almacen.getContrincante(contrincante), oroApostado);

                    // DEBUG COMBATE
                    // Combate newCombate = new Combate(almacen);
                    // newCombate.DEBUG_Initialize_Players(newDesafio);
                    // END DEBUG COMBATE
                    
                        try {
                            this.almacen.agregarDesafioAValidacion(newDesafio);
                        } catch (IOException ex) {
                            Logger.getLogger(Desafios.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    // DEBUG COMBATE
                    // newCombate.iniciarCombate(newDesafio);
                    // END DEBUG COMBATE

                        JPanel parent = (JPanel) getParent();
                        CardLayout cl = (CardLayout) parent.getLayout();
                        cl.show(parent, "menuUsuario");
//                    } else {
//                        javax.swing.JOptionPane.showMessageDialog(this, "Este contrincante no tiene armas o armaduras equipadas");
//                    }
                } else if (userList.getSelectedIndex() == -1){
                    javax.swing.JOptionPane.showMessageDialog(this, "Seleccione un contrincante");
                } else if(oroApostado > this.oro){
                    javax.swing.JOptionPane.showMessageDialog(this, "No tiene suficiente oro");
                    goldText.setText("Apostar oro");
                } else if (oroApostado < 0){
                    javax.swing.JOptionPane.showMessageDialog(this, "No se pueden apostar cantidades negativas");
                }
            } catch (NumberFormatException e){
                javax.swing.JOptionPane.showMessageDialog(this, "El oro apostado tiene que ser un número");
            }
            
        }
    }//GEN-LAST:event_desafiarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        JPanel parent = (JPanel) getParent();
        CardLayout cl = (CardLayout) parent.getLayout();
        cl.show(parent, "menuUsuario");
    }//GEN-LAST:event_btnVolverActionPerformed

    private void goldTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goldTextMousePressed
        goldText.setText("");
    }//GEN-LAST:event_goldTextMousePressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        goldText.setText("Apostar oro");
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVolver;
    private javax.swing.JButton desafiar;
    private javax.swing.JTextField goldText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> userList;
    // End of variables declaration//GEN-END:variables
}